use anyhow::Result;
use embedded_svc::mqtt::client::{
    Details,
    Event,
    QoS,
};
use esp_idf_svc::{
    eventloop::EspSystemEventLoop,
    hal::prelude::*,
    mqtt::client::{EspMqttClient, EspMqttMessage, MqttClientConfiguration},
};
use log::{error, info, warn};
use std::{thread::sleep, time::Duration};
use mqtt_example::wifi::wifi;

#[toml_cfg::toml_config]
pub struct Config {
    #[default("localhost")]
    mqtt_host: &'static str,
    #[default("")]
    mqtt_user: &'static str,
    #[default("")]
    mqtt_pass: &'static str,
    #[default("")]
    wifi_ssid: &'static str,
    #[default("")]
    wifi_psk: &'static str,
}

fn main() -> Result<()> {
    esp_idf_svc::sys::link_patches();
    esp_idf_svc::log::EspLogger::initialize_default();

    let peripherals = Peripherals::take().unwrap();
    let sysloop = EspSystemEventLoop::take()?;

    // The constant `CONFIG` is auto-generated by `toml_config`.
    let app_config = CONFIG;

    // Connect to the Wi-Fi network
    let _wifi = wifi(
        app_config.wifi_ssid,
        app_config.wifi_psk,
        peripherals.modem,
        sysloop,
    )?;

    // Client configuration:
    let broker_url = if app_config.mqtt_user != "" {
        format!(
            "mqtt://{}:{}@{}",
            app_config.mqtt_user, app_config.mqtt_pass, app_config.mqtt_host
        )
    } else {
        format!("mqtt://{}", app_config.mqtt_host)
    };

    let mqtt_config = MqttClientConfiguration::default();

    // Your Code:

    // 1. Create a client with default configuration and empty handler
    let mut client =
        EspMqttClient::new(
            &broker_url,
            &mqtt_config,
            move |message_event| match message_event {
                Ok(Event::Received(msg)) => process_message(msg),
                _ => warn!("Received from MQTT: {:?}", message_event),
            },
        )?;

    client.subscribe("rand-topic", QoS::AtLeastOnce)?;

    // 2. publish an empty hello message
    let payload: &[u8] = &[];
    info!("sayin' hello!");
    client.publish("hello-topic", QoS::AtLeastOnce, true, payload)?;

    loop {
        sleep(Duration::from_secs(1));
        let temp: f32 = 20.0;

        // 3. publish CPU temperature
        info!("Publishing temperature...");
        client.publish(
            "test-topic",
            QoS::AtLeastOnce,
            false,
            &temp.to_be_bytes() as &[u8],
        )?;
    }
}

fn process_message(message: &EspMqttMessage) {
    match message.details() {
        Details::Complete => {
            info!("{:?}", message);
        }
        _ => error!("Error while receiving message"),
    }
}
